//Tomcatjs Tomcat Manager interface library
// by Javier Peletier <jm@epiclabs.io>
// Inspired by node-tomcat-manager Tomasz Borychowski https://github.com/tborychowski
/// <reference path="typings/node/node.d.ts" />
/// <reference path="typings/q/Q.d.ts" />
var http = require("http");
var Q = require("q");
var Manager = (function () {
    function Manager(tomcatHostname, tomcatPort, tomcatUsername, tomcatPassword) {
        this.urlCfg = null;
        this.ignoredApps = ['ROOT', 'manager', 'docs', 'examples', 'host-manager'];
        this.urlCfg = {
            hostname: tomcatHostname,
            path: null,
            port: tomcatPort,
            headers: { "Authorization": 'Basic ' + new Buffer(tomcatUsername + ":" + tomcatPassword).toString('base64') }
        };
    }
    Manager.prototype.tomcatGet = function (path) {
        var resp = '';
        var defer = Q.defer();
        this.urlCfg.path = '/manager/text/' + path;
        var request = http.request(this.urlCfg, function (res) {
            res.on('data', function (chunk) {
                resp += chunk;
            });
            res.on('end', function () {
                defer.resolve(resp);
            });
        });
        request.on('error', function (e) {
            defer.reject(e);
        });
        request.end();
        return defer.promise;
    };
    Manager.prototype.fuzzyCompare = function (st1, st2) {
        var hay = st1.toLowerCase();
        var i = 0;
        var n = -1;
        var l;
        var s = st2.toLowerCase();
        for (; l = s[i++];)
            if (!~(n = hay.indexOf(l, n + 1)))
                return false;
        return true;
    };
    Manager.prototype.getApps = function () {
        var self = this;
        var defer = Q.defer();
        var appList = [];
        this.tomcatGet("list").then(function (data) {
            data.split("\n").forEach(function (line) {
                if (line.indexOf('OK - Listed applications') === 0)
                    return;
                line = line.trim();
                if (!line.length)
                    return;
                var st = line.split(':');
                if (self.ignoredApps.indexOf(st[3]) > -1)
                    return;
                appList.push(st[3]);
            }, function (err) {
                defer.reject(err);
            });
            defer.resolve(appList);
        });
        return defer.promise;
    };
    Manager.prototype.undeploy = function (applicationName) {
        var defer = Q.defer();
        this.tomcatGet("undeploy?path=/" + applicationName).then(function (data) {
            if (data.length >= 4 && data.substr(0, 4) == "FAIL") {
                defer.reject(data);
                return;
            }
            defer.resolve(applicationName);
        }, function (err) {
            defer.reject(err);
        });
        return defer.promise;
    };
    return Manager;
})();
exports.Manager = Manager;
//# sourceMappingURL=index.js.map